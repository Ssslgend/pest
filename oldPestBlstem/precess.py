import requests
import time
import csv

# --- 配置部分 ---
# 请替换为你在高德开放平台申请的Web服务API Key
AMAP_KEY = "25ecf27ae30b148c2997afc46fb4b09f"
GEOCONVERT_API_URL = "https://restapi.amap.com/v3/geocode/geo"
SPECIES_NAME = "美国白蛾"
OUTPUT_CSV_FILE = "fall_webworm_occurrences_2024_geocoded.csv"
# API请求之间的延迟（秒），以避免超出频率限制
DELAY_BETWEEN_REQUESTS = 0.2 # 高德免费额度QPS较高，但仍建议保留延迟

# --- 您提供的2024年发生点名录 ---
# 注意：这里只列出了一小部分作为示例，您需要将完整的列表粘贴到这里
location_list_2024 = [
    "东城区",
    "西城区",
    "朝阳区",
    "丰台区",
    "石景山区",
    "海淀区",
    "门头沟区",
    "房山区",
    "通州区",
    "顺义区",
    "昌平区",
    "大兴区",
    "怀柔区",
    "平谷区",
    "密云区",
    "和平区",
    "河东区",
    "河西区",
    "南开区",
    "河北区",
    "红桥区",
    "东丽区",
    "西青区",
    "津南区",
    "北辰区",
    "武清区",
    "宝坻区",
    "滨海新区",
    "宁河区",
    "静海区",
    "蓟州区",
    "石家庄市长安区",
    "桥西区",
    "新华区",
    "裕华区",
    "藁城区",
    "鹿泉区",
    "井陉县",
    "正定县",
    "行唐县",
    "灵寿县",
    "高邑县",
    "深泽县",
    "无极县",
    "平山县",
    "元氏县",
    "新乐市",
    "唐山市路南区",
    "路北区",
    "古冶区",
    "开平区",
    "丰南区",
    "丰润区",
    "曹妃甸区",
    "滦南县",
    "乐亭县",
    "迁西县",
    "玉田县",
    "遵化市",
    "迁安市",
    "滦州市",
    "秦皇岛市海港区",
    "山海关区",
    "北戴河区",
    "抚宁区",
    "青龙满族自治县",
    "昌黎县",
    "卢龙县",
    "邯郸市邯山区",
    "丛台区",
    "复兴区",
    "肥乡区",
    "永年区",
    "临漳县",
    "成安县",
    "大名县",
    "邱县",
    "鸡泽县",
    "广平县",
    "馆陶县",
    "魏县",
    "曲周县",
    "邢台市襄都区",
    "信都区",
    "任泽区",
    "南和区",
    "临城县",
    "内丘县",
    "柏乡县",
    "隆尧县",
    "宁晋县",
    "巨鹿县",
    "广宗县",
    "平乡县",
    "威县",
    "清河县",
    "临西县",
    "南宫市",
    "沙河市",
    "保定市竞秀区",
    "莲池区",
    "满城区",
    "清苑区",
    "徐水区",
    "涞水县",
    "定兴县",
    "唐县",
    "高阳县",
    "望都县",
    "易县",
    "曲阳县",
    "蠡县",
    "顺平县",
    "博野县",
    "涿州市",
    "安国市",
    "高碑店市",
    "承德市鹰手营子矿区",
    "兴隆县",
    "宽城满族自治县",
    "平泉市",
    "沧州市新华区",
    "运河区",
    "沧县",
    "青县",
    "东光县",
    "海兴县",
    "盐山县",
    "肃宁县",
    "南皮县",
    "吴桥县",
    "献县",
    "孟村回族自治县",
    "泊头市",
    "任丘市",
    "黄骅市",
    "河间市",
    "廊坊市安次区",
    "广阳区",
    "固安县",
    "永清县",
    "香河县",
    "大城县",
    "文安县",
    "大厂回族自治县",
    "霸州市",
    "三河市",
    "衡水市桃城区",
    "冀州区",
    "枣强县",
    "武邑县",
    "武强县",
    "饶阳县",
    "安平县",
    "故城县",
    "景县",
    "阜城县",
    "深州市",
    "定州市",
    "辛集市",
    "雄安新区容城县",
    "安新县",
    "雄县",
    "通辽市科尔沁左翼中旗",
    "科尔沁左翼后旗",
    "沈阳市苏家屯区",
    "浑南区",
    "沈北新区",
    "于洪区",
    "辽中区",
    "康平县",
    "法库县",
    "新民市",
    "大连市甘井子区",
    "旅顺口区",
    "普兰店区",
    "金普新区",
    "长海县",
    "瓦房店市",
    "庄河市",
    "鞍山市千山区",
    "台安县",
    "岫岩满族自治县",
    "海城市",
    "抚顺市顺城区",
    "抚顺县",
    "本溪市平山区",
    "溪湖区",
    "明山区",
    "南芬区",
    "本溪满族自治县",
    "桓仁满族自治县",
    "丹东市元宝区",
    "振兴区",
    "振安区",
    "宽甸满族自治县",
    "东港市",
    "凤城市",
    "锦州市太和区",
    "黑山县",
    "义县",
    "凌海市",
    "北镇市",
    "营口市鲅鱼圈区",
    "老边区",
    "盖州市",
    "大石桥市",
    "阜新市清河门区",
    "细河区",
    "阜新蒙古族自治县",
    "彰武县",
    "辽阳市文圣区",
    "宏伟区",
    "弓长岭区",
    "太子河区",
    "辽阳县",
    "灯塔市",
    "盘锦市大洼区",
    "盘山县",
    "铁岭市银州区",
    "清河区",
    "铁岭县",
    "西丰县",
    "昌图县",
    "调兵山市",
    "开原市",
    "葫芦岛市连山区",
    "龙港区",
    "南票区",
    "绥中县",
    "兴城市",
    "长春市双阳区",
    "长春经济技术开发区",
    "长春汽车经济技术开发区",
    "长春高新技术开发区",
    "公主岭市",
    "四平市铁西区",
    "梨树县",
    "双辽市",
    "辽源市龙山区",
    "西安区",
    "东丰县",
    "东辽县",
    "通化市梅河口市",
    "集安市",
    "闵行区",
    "宝山区",
    "嘉定区",
    "浦东新区",
    "金山区",
    "松江区",
    "青浦区",
    "奉贤区",
    "南京市玄武区",
    "秦淮区",
    "建邺区",
    "鼓楼区",
    "浦口区",
    "栖霞区",
    "江宁区",
    "六合区",
    "徐州市鼓楼区",
    "云龙区",
    "贾汪区",
    "泉山区",
    "铜山区",
    "丰县",
    "沛县",
    "睢宁县",
    "新沂市",
    "邳州市",
    "连云港市连云区",
    "海州区",
    "赣榆区",
    "东海县",
    "灌云县",
    "灌南县",
    "淮安市淮安区",
    "淮阴区",
    "清江浦区",
    "洪泽区",
    "涟水县",
    "盱眙县",
    "金湖县",
    "盐城市亭湖区",
    "盐都区",
    "大丰区",
    "响水县",
    "滨海县",
    "阜宁县",
    "射阳县",
    "建湖县",
    "东台市",
    "扬州市广陵区",
    "邗江区",
    "江都区",
    "宝应县",
    "仪征市",
    "高邮市",
    "镇江市润州区",
    "丹徒区",
    "扬中市",
    "句容市",
    "镇江高新技术产业开发区",
    "泰州市海陵区",
    "泰州医药高新区（高港区）",
    "姜堰区",
    "兴化市",
    "宿迁市宿城区",
    "宿豫区",
    "沭阳县",
    "泗阳县",
    "泗洪县",
    "嘉兴市嘉善县",
    "平湖市",
    "合肥市瑶海区",
    "庐阳区",
    "蜀山区",
    "包河区",
    "长丰县",
    "肥东县",
    "巢湖市",
    "芜湖市弋江区",
    "鸠江区",
    "繁昌区",
    "无为市",
    "蚌埠市龙子湖区",
    "蚌山区",
    "禹会区",
    "淮上区",
    "怀远县",
    "五河县",
    "固镇县",
    "淮南市大通区",
    "田家庵区",
    "谢家集区",
    "八公山区",
    "潘集区",
    "毛集实验区",
    "凤台县",
    "寿县",
    "马鞍山市雨山区",
    "当涂县",
    "含山县",
    "淮北市杜集区",
    "相山区",
    "烈山区",
    "濉溪县",
    "铜陵市义安区",
    "郊区",
    "枞阳县",
    "滁州市琅琊区",
    "南谯区",
    "来安县",
    "全椒县",
    "定远县",
    "凤阳县",
    "天长市",
    "明光市",
    "阜阳市颍州区",
    "颍东区",
    "颍泉区",
    "临泉县",
    "太和县",
    "阜南县",
    "颍上县",
    "界首市",
    "宿州市埇桥区",
    "砀山县",
    "萧县",
    "灵璧县",
    "泗县",
    "六安市霍邱县",
    "亳州市谯城区",
    "涡阳县",
    "蒙城县",
    "利辛县",
    "池州市贵池区",
    "济南市历下区",
    "市中区",
    "槐荫区",
    "天桥区",
    "历城区",
    "长清区",
    "章丘区",
    "济阳区",
    "莱芜区",
    "钢城区",
    "平阴县",
    "商河县",
    "青岛市市南区",
    "市北区",
    "西海岸新区（黄岛区）",
    "崂山区",
    "李沧区",
    "城阳区",
    "即墨区",
    "胶州市",
    "平度市",
    "莱西市",
    "淄博市淄川区",
    "张店区",
    "博山区",
    "临淄区",
    "周村区",
    "桓台县",
    "高青县",
    "沂源县",
    "枣庄市市中区",
    "薛城区",
    "峄城区",
    "台儿庄区",
    "山亭区",
    "滕州市",
    "东营市东营区",
    "河口区",
    "垦利区",
    "利津县",
    "广饶县",
    "烟台市芝罘区",
    "福山区",
    "牟平区",
    "莱山区",
    "蓬莱区",
    "龙口市",
    "莱阳市",
    "莱州市",
    "招远市",
    "栖霞市",
    "海阳市",
    "潍坊市潍城区",
    "寒亭区",
    "坊子区",
    "奎文区",
    "临朐县",
    "昌乐县",
    "青州市",
    "诸城市",
    "寿光市",
    "安丘市",
    "高密市",
    "昌邑市",
    "济宁市任城区",
    "兖州区",
    "微山县",
    "鱼台县",
    "金乡县",
    "嘉祥县",
    "汶上县",
    "泗水县",
    "梁山县",
    "曲阜市",
    "邹城市",
    "泰安市泰山区",
    "岱岳区",
    "宁阳县",
    "东平县",
    "新泰市",
    "肥城市",
    "威海市环翠区",
    "文登区",
    "荣成市",
    "乳山市",
    "日照市东港区",
    "岚山区",
    "五莲县",
    "莒县",
    "临沂市兰山区",
    "罗庄区",
    "河东区",
    "沂南县",
    "郯城县",
    "沂水县",
    "兰陵县",
    "费县",
    "平邑县",
    "莒南县",
    "蒙阴县",
    "临沭县",
    "德州市德城区",
    "陵城区",
    "宁津县",
    "庆云县",
    "临邑县",
    "齐河县",
    "平原县",
    "夏津县",
    "武城县",
    "乐陵市",
    "禹城市",
    "聊城市东昌府区",
    "茌平区",
    "阳谷县",
    "莘县",
    "东阿县",
    "冠县",
    "高唐县",
    "临清市",
    "滨州市滨城区",
    "沾化区",
    "惠民县",
    "阳信县",
    "无棣县",
    "博兴县",
    "邹平市",
    "菏泽市牡丹区",
    "定陶区",
    "曹县",
    "单县",
    "成武县",
    "巨野县",
    "郓城县",
    "鄄城县",
    "东明县",
    "郑州市金水区",
    "惠济区",
    "郑东新区",
    "中牟县",
    "开封市龙亭区",
    "顺河回族区",
    "鼓楼区",
    "祥符区",
    "开封新区",
    "通许县",
    "尉氏县",
    "兰考县",
    "平顶山市叶县",
    "安阳市文峰区",
    "北关区",
    "安阳县",
    "汤阴县",
    "滑县",
    "内黄县",
    "鹤壁市山城区",
    "淇滨区",
    "浚县",
    "淇县",
    "新乡市红旗区",
    "卫滨区",
    "新乡县",
    "原阳县",
    "延津县",
    "封丘县",
    "卫辉市",
    "长垣市",
    "焦作市修武县",
    "武陟县",
    "濮阳市华龙区",
    "濮阳经济技术开发区",
    "清丰县",
    "南乐县",
    "范县",
    "台前县",
    "濮阳县",
    "许昌市魏都区",
    "建安区",
    "鄢陵县",
    "襄城县",
    "漯河市源汇区",
    "郾城区",
    "召陵区",
    "舞阳县",
    "临颍县",
    "商丘市梁园区",
    "睢阳区",
    "民权县",
    "睢县",
    "虞城县",
    "夏邑县",
    "永城市",
    "信阳市浉河区",
    "平桥区",
    "光山县",
    "新县",
    "商城县",
    "固始县",
    "淮滨县",
    "息县",
    "周口市川汇区",
    "淮阳区",
    "扶沟县",
    "西华县",
    "商水县",
    "沈丘县",
    "郸城县",
    "项城市",
    "驻马店市驿城区",
    "西平县",
    "上蔡县",
    "平舆县",
    "正阳县",
    "确山县",
    "泌阳县",
    "汝南县",
    "遂平县",
    "新蔡县",
    "襄阳市襄州区",
    "枣阳市",
    "孝感市孝南区",
    "孝昌县",
    "大悟县",
    "云梦县",
    "应城市",
    "安陆市",
    "黄冈市红安县",
    "随州市随县",
    "广水市"
]

location_list_20241 = [
    "北京市东城区", "北京市西城区", "北京市朝阳区", "北京市丰台区", "北京市石景山区",
    "北京市海淀区", "北京市门头沟区", "北京市房山区", "北京市通州区", "北京市顺义区",
    "北京市昌平区", "北京市大兴区", "北京市怀柔区", "北京市平谷区", "北京市密云区",
    "天津市和平区", "天津市河东区", "天津市河西区", "天津市南开区", "天津市河北区",
    "河北省石家庄市长安区", "河北省石家庄市桥西区", "河北省石家庄市新华区",
    "内蒙古自治区通辽市科尔沁左翼中旗", "内蒙古自治区通辽市科尔沁左翼后旗",
    "辽宁省沈阳市苏家屯区", "辽宁省沈阳市浑南区",
    "吉林省长春市双阳区", "吉林省长春市长春经济技术开发区",
    "上海市闵行区", "上海市宝山区",
    "江苏省南京市玄武区", "江苏省南京市秦淮区",
    "浙江省嘉兴市嘉善县", "浙江省嘉兴市平湖市",
    "安徽省合肥市瑶海区", "安徽省合肥市庐阳区",
    "山东省济南市历下区", "山东省济南市市中区",
    "河南省郑州市金水区", "河南省郑州市惠济区",
    "湖北省襄阳市襄州区", "湖北省襄阳市枣阳市"
    # ... 请将您之前提供的完整列表粘贴到这里
    # 例如：
    # "天津市红桥区", "天津市东丽区", ...
    # "河北省唐山市路南区", ...
    # ... 直到 "湖北省随州市广水市"
]
CSV_LOCATION_LIST = "location_list_2024.csv"
location_list_2024 = []
with open(CSV_LOCATION_LIST, newline='', encoding='utf-8-sig') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        # 假设 CSV 文件首列表头为 “location”
        location_list_2024.append(row['location'])


def geocode_location(address, api_key):
    """
    使用高德地理编码API获取地址的经纬度。
    """
    params = {
        "key": api_key,
        "address": address,
        "output": "json"
    }
    try:
        response = requests.get(GEOCONVERT_API_URL, params=params)
        response.raise_for_status() # 如果请求失败则引发HTTPError
        data = response.json()

        if data["status"] == "1" and data["geocodes"]:
            # 高德返回的location是 "经度,纬度" 格式
            location_str = data["geocodes"][0]["location"]
            longitude, latitude = location_str.split(',')
            return float(longitude), float(latitude)
        else:
            print(f"高德API错误: 地址 '{address}' - {data.get('info', '未知错误')}")
            return None, None
    except requests.exceptions.RequestException as e:
        print(f"请求高德API时发生网络错误: {e}")
        return None, None
    except Exception as e:
        print(f"处理地址 '{address}' 时发生未知错误: {e}")
        return None, None

def main():
    geocoded_data = []
    failed_locations = []
    print(AMAP_KEY)
    print(f"开始地理编码 {len(location_list_2024)} 个地点...")

    for i, location_name in enumerate(location_list_2024):
        print(f"正在处理 ({i+1}/{len(location_list_2024)}): {location_name}")
        longitude, latitude = geocode_location(location_name, AMAP_KEY)

        if longitude and latitude:
            geocoded_data.append([SPECIES_NAME, longitude, latitude, location_name]) # 额外记录原始地名
            print(f"  -> 成功: 经度={longitude}, 纬度={latitude}")
        else:
            failed_locations.append(location_name)
            print(f"  -> 失败")

        # 延迟以避免超出API频率限制
        time.sleep(DELAY_BETWEEN_REQUESTS)

    # 将结果写入CSV文件
    try:
        with open(OUTPUT_CSV_FILE, mode='w', newline='', encoding='utf-8-sig') as file: # utf-8-sig 确保Excel正确显示中文
            writer = csv.writer(file)
            # 写入表头 (物种名称 - 发生样点经度 - 发生样点纬度 - 原始地名)
            writer.writerow(["物种名称", "发生样点经度", "发生样点纬度", "原始行政区名称"])
            # 写入数据
            for row in geocoded_data:
                writer.writerow(row)
        print(f"\n成功将 {len(geocoded_data)} 条地理编码数据写入到 {OUTPUT_CSV_FILE}")
    except IOError:
        print(f"错误：无法写入CSV文件 {OUTPUT_CSV_FILE}")


    if failed_locations:
        print("\n以下地点未能成功进行地理编码:")
        for loc in failed_locations:
            print(f"- {loc}")
        print(f"\n总计 {len(failed_locations)} 个地点编码失败。")

if __name__ == "__main__":
    if AMAP_KEY == "YOUR_AMAP_KEY":
        print("错误：请在代码中配置您的真实高德API Key (AMAP_KEY)。")
    else:
        print(AMAP_KEY)
        main()